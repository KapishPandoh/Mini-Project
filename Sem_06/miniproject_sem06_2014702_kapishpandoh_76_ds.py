# -*- coding: utf-8 -*-
"""MiniProject_Sem06_2014702_KapishPandoh_76_DS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HbZuDfLkqKo5ydXebbCG6wAC5_pvAmuc

<center><h1> Gender and Age Prediction using CNN </h1></center>
"""

from google.colab import drive
drive.mount('/content/drive')

!ls drive/MyDrive

#!unzip drive/MyDrive/UTKFace.zip

"""## Import Libraries"""

import os

import cv2

import numpy as np
import pandas as pd

# Commented out IPython magic to ensure Python compatibility.
from PIL import Image 

import seaborn as sns

import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.model_selection import train_test_split

import tensorflow as tf

from tensorflow.keras.models import Sequential ,Model

from tensorflow.keras.layers import Input

from tensorflow.keras.layers import Conv2D

# used for reduce data dimensionality
from tensorflow.keras.layers import MaxPooling2D

from tensorflow.keras.layers import Dropout

# number of units proportional to input
from tensorflow.keras.layers import Flatten

#regular dense connected layer
from tensorflow.keras.layers import Dense

from tensorflow.keras.layers import Activation

from tensorflow.keras.optimizers import Adam

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix 
from sklearn.metrics import classification_report

import warnings
warnings.filterwarnings("ignore")

"""## Data Preprocessing"""

face_folder = "./UTKFace"

files = os.listdir(face_folder)

files

"""Name of Images : age_gender_

gender : 0 male , 1 female
"""

ages    = []
genders = []
images  = []

for face in files :
    
    age    = int(face.split('_')[0])
    gender = int(face.split('_')[1])
    
    path  = face_folder + '/' + face
    image = cv2.imread(path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image,(48,48))
    
    
    ages.append(age)
    genders.append(gender)
    images.append(image)

G = ['Male' ,'Female']

print(ages[10])
print(G[genders[10]])
plt.imshow(images[10])

print(ages[24])
print(G[genders[24]])
plt.imshow(images[24])

images_arr  = np.array(images)
genders_arr = np.array(genders)
ages_arr    = np.array(ages)

"""## Data Visualization

- `Gender`
"""

np.unique(genders_arr)

values, counts = np.unique(genders_arr, return_counts=True)

print(counts)

gender = ['Male', 'Female']

plt.bar(gender,counts)

"""- `Ages`"""

values, counts = np.unique(ages_arr, return_counts=True)

plt.plot(counts)
plt.xlabel('ages')
plt.ylabel('distribution')
plt.show()

"""## X and Y"""

# X ----> images_arr
# Y ----> genders_arr and ages_arr

X = images_arr/255
X

labels = []

for i in range(len(ages)) :
    
    label = []
    
    label.append([ages[i]])
    label.append([genders[i]])
  
    labels.append(label)

y = np.array(labels)
y

"""## Split Data """

X_train, X_test, y_train, y_test = train_test_split(X, y ,test_size=0.25 ,random_state=45)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

#             gender     ,     age
y_train = [ y_train[:,1] , y_train[:,0] ]
y_test  = [ y_test[:,1]  , y_test[:,0]  ]

"""## Model"""

input_shape = X_train.shape[1:]

inputs = Input((input_shape))

convolutional_1 = Conv2D(32, kernel_size=(3, 3), activation='relu') (inputs)
maxpooling_1    = MaxPooling2D(pool_size=(2, 2))                    (convolutional_1)

convolutional_2 = Conv2D(64, kernel_size=(3, 3), activation='relu') (maxpooling_1)
maxpooling_2    = MaxPooling2D(pool_size=(2, 2))                    (convolutional_2)

convolutional_3 = Conv2D(128, kernel_size=(3, 3), activation='relu') (maxpooling_2)
maxpooling_3    = MaxPooling2D(pool_size=(2, 2))                     (convolutional_3)

convolutional_4 = Conv2D(256, kernel_size=(3, 3), activation='relu') (maxpooling_3)
maxpooling_4    = MaxPooling2D(pool_size=(2, 2))                     (convolutional_4)

flatten = Flatten() (maxpooling_4)

# fully connected layers

dense_1 = Dense(256, activation='relu') (flatten)
dense_2 = Dense(256, activation='relu') (flatten)

dropout_1 = Dropout(0.3) (dense_1)
dropout_2 = Dropout(0.3) (dense_2)

output_1 = Dense(1, activation='sigmoid', name='gender_out') (dropout_1)
output_2 = Dense(1, activation='relu', name='age_out') (dropout_2)

model = Model(inputs=[inputs], outputs=[output_1, output_2])

# binary_crossentropy for gender (classification) , 
# mae for age (regression)

model.compile(loss=['binary_crossentropy', 'mae'], optimizer='adam', metrics=['accuracy'])

model.summary()

from tensorflow.keras.utils import plot_model
plot_model(model, to_file='model.png')

model_history = model.fit(
                           X_train , 
                           y_train , 
                           validation_data = (X_test,y_test) ,
                           batch_size = 64 , 
                           epochs     = 30 ,
                           shuffle    = True                           
                        )

"""## Evaluation"""

model.evaluate(X_test,y_test)

## Model Loss

train_loss = model_history.history['loss']
val_loss   = model_history.history['val_loss']

plt.plot(train_loss ,label='Train Loss')
plt.plot(val_loss   ,label='Test  Loss')

plt.xlabel("Epochs")
plt.ylabel("Loss")

plt.legend()

plt.title("Model Loss")

## Gender

train_loss = model_history.history['gender_out_loss']
val_loss   = model_history.history['val_gender_out_loss']

plt.plot(train_loss ,label='Train Loss')
plt.plot(val_loss   ,label='Test  Loss')

plt.xlabel("Epochs")
plt.ylabel("Loss")

plt.legend()

plt.title("Model Loss")

train_acc = model_history.history['gender_out_accuracy']
val_acc   = model_history.history['val_gender_out_accuracy']

plt.plot(train_acc ,label='Train Accuracy')
plt.plot(val_acc   ,label='Test  Accuracy')

plt.xlabel("Epochs")
plt.ylabel("Accuracy")

plt.legend()

plt.title("Model Accuracy")

y_pred = model.predict(X_test)

## Age

mini = y_test[1].min()
maxi = y_test[1].max()

plt.scatter(y_test[1] ,y_pred[1] ,color = 'hotpink')
plt.plot([mini,maxi],[mini,maxi],'k--',color='black')

plt.xlabel("Actual Age")
plt.ylabel("Predicted Age")

plt.title("Actual vs Predicted Age")

gend_y_pred = np.round(y_pred[0])

report = classification_report(y_test[0],gend_y_pred)
print(report)

confusion_matrix(y_test[0],gend_y_pred)

cm = confusion_matrix(y_test[0],gend_y_pred)
sns.heatmap(cm, annot=True)

"""## Prediction"""

# images_arr  ---> original Image
# images_arr_2 ---> /255

gender = ['Male' ,'Female']

def modelPredection1(index):
    
    plt.imshow(images_arr[index])
    
    img_test = X[index]
    img_test = np.array([img_test])
    
    pred = model.predict(img_test)
    
    gen = int(np.round(pred[0][0]))
    age = int(np.round(pred[1][0]))
    
    print("Predicted Age: "+ str(age))
    print("Predicted Sex: "+ gender[gen])

modelPredection1(0)

modelPredection1(6)

modelPredection1(23)

modelPredection1(137)

gender = ['Male' ,'Female']

def modelPredection2(path):
    
    img = Image.open(path)
    plt.imshow(img);
    
    image = cv2.imread(path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image,(48,48))
    
    image  = np.array(image)
    image  = image/255
    img_test = np.array([image])
    
    pred = model.predict(img_test)
    
    gen = int(np.round(pred[0][0]))
    age = int(np.round(pred[1][0]))
    
    print("Predicted Age: "+ str(age))
    print("Predicted Sex: "+ gender[gen])

modelPredection2('man.jpg')

modelPredection2('bella.jpg')

modelPredection2('boy.jpg')

modelPredection2('65_1_0_20170110143236073.jpg')

modelPredection2('67_0_0_20170104023306558.jpg')

modelPredection2('96_1_0_20170110172637082.jpg')

